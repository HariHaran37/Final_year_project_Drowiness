#!/usr/bin/python

import RPi.GPIO as GPIO
import spidev
import time

GPIO.setmode(GPIO.BCM)
# Define GPIO to LCD mapping\par
LCD_RS = 2
LCD_E  = 3
LCD_D4 = 26
LCD_D5 = 19
LCD_D6 = 13
LCD_D7 = 6

# Define some device constants\par
LCD_WIDTH = 20    # Maximum characters per line\par
LCD_CHR = True
LCD_CMD = False
 
LCD_LINE_1 = 0x80 # LCD RAM address for the 1st line\par
LCD_LINE_2 = 0xC0 # LCD RAM address for the 2nd line\par
LCD_LINE_3 = 0x94 # LCD RAM address for the 2nd line\par
LCD_LINE_4 = 0xD4 # LCD RAM address for the 2nd line\par
 
# Timing constants\par
E_PULSE = 0.0005
E_DELAY = 0.0005

def main():
  # Main program block\par
  GPIO.setwarnings(False)
  GPIO.setmode(GPIO.BCM)       # Use BCM GPIO numbers\par
  GPIO.setup(LCD_E, GPIO.OUT)  # E\par
  GPIO.setup(LCD_RS, GPIO.OUT) # RS\par
  GPIO.setup(LCD_D4, GPIO.OUT) # DB4\par
  GPIO.setup(LCD_D5, GPIO.OUT) # DB5\par
  GPIO.setup(LCD_D6, GPIO.OUT) # DB6\par
  GPIO.setup(LCD_D7, GPIO.OUT) # DB7\par

  # Initialise display\par
  lcd_init()
 
def lcd_init():
  # Initialise display\par
  lcd_byte(0x33,LCD_CMD) # 110011 Initialise\par
  lcd_byte(0x32,LCD_CMD) # 110010 Initialise\par
  lcd_byte(0x06,LCD_CMD) # 000110 Cursor move direction\par
  lcd_byte(0x0C,LCD_CMD) # 001100 Display On,Cursor Off, Blink Off\par
  lcd_byte(0x28,LCD_CMD) # 101000 Data length, number of lines, font size\par
  lcd_byte(0x01,LCD_CMD) # 000001 Clear display\par
  time.sleep(E_DELAY)
 
def lcd_byte(bits, mode):
  # Send byte to data pins\par
  # bits = data\par
  # mode = True  for character\par
  #        False for command\par
 
  GPIO.output(LCD_RS, mode) # RS\par
 
  # High bits\par
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x10==0x10:
    GPIO.output(LCD_D4, True)
  if bits&0x20==0x20:
    GPIO.output(LCD_D5, True)
  if bits&0x40==0x40:
    GPIO.output(LCD_D6, True)
  if bits&0x80==0x80:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin\par
  lcd_toggle_enable()
 
  # Low bits\par
  GPIO.output(LCD_D4, False)
  GPIO.output(LCD_D5, False)
  GPIO.output(LCD_D6, False)
  GPIO.output(LCD_D7, False)
  if bits&0x01==0x01:
    GPIO.output(LCD_D4, True)
  if bits&0x02==0x02:
    GPIO.output(LCD_D5, True)
  if bits&0x04==0x04:
    GPIO.output(LCD_D6, True)
  if bits&0x08==0x08:
    GPIO.output(LCD_D7, True)
 
  # Toggle 'Enable' pin\par
  lcd_toggle_enable()
 
def lcd_toggle_enable():
  # Toggle enable\par
  time.sleep(E_DELAY)
  GPIO.output(LCD_E, True)
  time.sleep(E_PULSE)
  GPIO.output(LCD_E, False)
  time.sleep(E_DELAY)
 
def lcd_string(message,line):
  # Send string to display\par
 
  message = message.ljust(LCD_WIDTH," ")
 
  lcd_byte(line, LCD_CMD)

  for i in range(LCD_WIDTH):
    lcd_byte(ord(message[i]),LCD_CHR)
main()
if __name__=='__main__':
      lcd_string("LD=" ,LCD_LINE_1)
      
 # lcd_byte(LCD_LINE_1, LCD_CMD)  
 # lcd_string("LD=%0.1f",LCD_LINE_1)
 # lcd_byte(0x89, LCD_CMD)  
 # lcd_string("LD=%0.1f" %(temp_volts),LCD_LINE_1)
 # time.sleep(2)
 # lcd_byte(0xC0, LCD_CMD)  
 # lcd_string("CT=%0.1f" %(current_volts) + "A")
 # lcd_byte(0xC9, LCD_CMD)  
 # lcd_string("Gas=%0.1f" %(gas_volts) + "")
  #subprocess.Popen("sudo python face_recognizer.py",shell=True)
  
